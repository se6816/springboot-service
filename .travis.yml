language: java
jdk:
  - openjdk11

# 어느 브랜 치에 푸시될 떄 수행될지 결정
branches:   
  only:
    - main



# Travis CI 서버의 Home
# 해당 디렉토리를 캐싱하여 같은 의존성을 다음 배포 떄 다시 받지 않도록 함
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.m2'
before_script:
  - cd springSecurity/
  - chmod +x ./mvnw
# 지정한 브랜치가 푸쉬될 때 실행되는 명령어
script: "./mvnw clean package"

# 배포 이전 작업으로 CodeDeploy는 Jar파일을 인식하지 못하므로 별도의 이름으로 zip으로 압축해야 한다.
before_deploy:
  - zip -r springboot-service *     # 현재 위치의 모든 파일을 springboot-service라는 이름으로 압축한다.
  - mkdir -p deploy                # deploy라는 디렉토리를 Travis CI가 실행중인 위치에서 생성
  - mv springboot-service.zip deploy/springboot-service.zip  # zip파일 이동

# S3로 파일 업로드, CodeDeploy로 배포 등 외부 서비스와 연동될 행위들을 선언
deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY # Travis repo Setting에서 설정한 환경설정 변수
    secret_access_key: $AWS_SECRET_KEY
    
    bucket: springboot-service-build-file   # S3 버킷 명
    region: ap-northeast-2
    skip-cleanup: true
    acl: private # zip 파일 접근을 private로
    local_dir: deploy   # 해당 디렉토리의 파일들만 S3로 전송된다.
    wait-until-deployed: true
    on:
      branch: main
      # all_branches: true으로 사용해도 됨
  - provider: codedeploy
    access_key_id: $AWS_ACCESS_KEY # Travis repo Setting에서 설정한 환경설정 변수
    secret_access_key: $AWS_SECRET_KEY
    
    bucket: springboot-service-build-file # S3 버킷 명
    key: springboot-service.zip           # 빌드 파일
    
    bundle_type: zip                  # 압축 확장자
    application: springboot-service                # codedeploy 애플리케이션 명
    deployment_group: springboot-service-group   # codedeploy 배포 그룹 명
    
    region: ap-northeast-2
    wait-until-deployed: true
    on:
      branch: main
    
      
    
#CI 실행 완료 시 메일로 알림
# CI 실행 완료 시 알람 메일
notifications:
  email:
     recipients:
      - se6816@naver.com
      
